// üìÅ Chemin : lib/services/pocketbase_service.dart
// üîó D√©pendances : pocketbase.dart, auth_service.dart
// üìã Description : Service PocketBase pour remplacer FirebaseService - Version COMPL√àTE

import 'package:pocketbase/pocketbase.dart';
import 'package:pocketbase/pocketbase.dart' show RecordModel;
import '../models/enveloppe.dart';
import 'auth_service.dart';
import '../models/categorie.dart';
import '../models/compte.dart';

class PocketBaseService {
  static final PocketBaseService _instance = PocketBaseService._internal();
  factory PocketBaseService() => _instance;
  PocketBaseService._internal();

  static PocketBase? _pocketBase;

  // Obtenir l'instance PocketBase depuis AuthService
  static Future<PocketBase> _getPocketBaseInstance() async {
    // UTILISER L'INSTANCE D'AUTHSERVICE au lieu de cr√©er la n√¥tre !
    final authServiceInstance = AuthService.pocketBaseInstance;
    if (authServiceInstance != null) {
      print('üîÑ PocketBaseService - Utilisation instance AuthService');
      print('üîó URL PocketBase utilis√©e: ${authServiceInstance.baseUrl}');
      print('üîê AuthStore valide: ${authServiceInstance.authStore.isValid}');
      print('üîê Utilisateur connect√©: ${authServiceInstance.authStore.model?.id}');
      return authServiceInstance;
    }

    print('‚ö†Ô∏è Pas d\'instance AuthService, cr√©ation fallback...');
    if (_pocketBase != null) return _pocketBase!;

    // URLs de fallback dans l'ordre de priorit√©
    const List<String> _pocketBaseUrls = [
      'http://192.168.1.77:8090', // Local WiFi
      'http://10.0.2.2:8090', // √âmulateur Android
      'https://toutiebudget.duckdns.org', // Production
    ];

    // Tester chaque URL dans l'ordre
    for (final url in _pocketBaseUrls) {
      try {
        print('üîç Test connexion PocketBase: $url');

        // Test simple pour v√©rifier la connexion
        _pocketBase = PocketBase(url);
        await _pocketBase!.collection('users').getList(page: 1, perPage: 1);
        
        print('‚úÖ Connexion PocketBase r√©ussie: $url');
        print('üîó URL PocketBase utilis√©e: ${_pocketBase!.baseUrl}');
        return _pocketBase!;
      } catch (e) {
        print('‚ùå √âchec connexion PocketBase: $url - $e');
        continue;
      }
    }

    throw Exception('‚ùå Aucune connexion PocketBase disponible');
  }

  // Lire les cat√©gories depuis PocketBase
  static Stream<List<Categorie>> lireCategories() async* {
    try {
      print('üîÑ PocketBaseService - Lecture cat√©gories...');
      final pb = await _getPocketBaseInstance();
      print('üîÑ PocketBaseService - Instance obtenue pour cat√©gories');

      // V√©rifier que l'utilisateur est connect√©
      final utilisateurId = pb.authStore.model?.id;
      print('üîÑ PocketBaseService - Utilisateur ID pour cat√©gories: $utilisateurId');
      
      if (utilisateurId == null) {
        print('‚ùå Aucun utilisateur connect√© dans PocketBase pour cat√©gories');
        yield [];
        return;
      }

      print('üîÑ PocketBaseService - D√©but lecture collection categories');
      final records = await pb.collection('categories').getFullList(
        filter: 'utilisateur_id = "$utilisateurId"',
      );
      print('‚úÖ PocketBaseService - ${records.length} cat√©gories trouv√©es');

      print('üîÑ PocketBaseService - Conversion des cat√©gories...');
      final List<Categorie> categories = [];
      
      for (final record in records) {
        // R√©cup√©rer les enveloppes pour cette cat√©gorie
        print('üîÑ R√©cup√©ration enveloppes pour cat√©gorie: ${record.data['nom']}');
        final enveloppesRecords = await pb.collection('enveloppes').getFullList(
          filter: 'categorie_id = "${record.id}" && utilisateur_id = "$utilisateurId"',
        );
        print('‚úÖ ${enveloppesRecords.length} enveloppes trouv√©es pour ${record.data['nom']}');
        
        // Convertir les enveloppes
        final enveloppes = enveloppesRecords.map((envRecord) => Enveloppe(
          id: envRecord.id,
          utilisateurId: envRecord.data['utilisateur_id'] ?? '',
          categorieId: envRecord.data['categorie_id'] ?? '',
          nom: envRecord.data['nom'] ?? '',
          soldeEnveloppe: (envRecord.data['solde_enveloppe'] ?? 0).toDouble(),
        )).toList();
        
        // Cr√©er la cat√©gorie avec ses enveloppes
        final categorie = Categorie(
          id: record.id,
          utilisateurId: record.data['utilisateur_id'],
          nom: record.data['nom'] ?? '',
          ordre: record.data['ordre'] ?? 0,
        );
        
        categories.add(categorie);
      }

      print('‚úÖ PocketBaseService - Cat√©gories converties: ${categories.length}');
      yield categories;
      print('‚úÖ PocketBaseService - Cat√©gories yielded avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lecture cat√©gories PocketBase: $e');
      yield [];
    }
  }

  // ============================================================================
  // M√âTHODES POUR G√âRER LES CAT√âGORIES
  // ============================================================================

  // M√©thode pour ajouter ou mettre √† jour une cat√©gorie
  static Future<String> ajouterCategorie(Categorie categorie) async {
    try {
      final pb = await _getPocketBaseInstance();
      final userId = pb.authStore.model?.id;
      if (userId == null) throw Exception('Utilisateur non connect√©');
      
      final categorieData = {
        'utilisateur_id': userId,
        'nom': categorie.nom,
        'ordre': categorie.ordre,
      };
      
      // Si l'ID existe, on met √† jour, sinon on cr√©e
      if (categorie.id.isNotEmpty) {
        await pb.collection('categories').update(categorie.id, body: categorieData);
        print('‚úÖ Cat√©gorie mise √† jour avec succ√®s: ${categorie.id}');
        return categorie.id;
      } else {
        final record = await pb.collection('categories').create(body: categorieData);
        print('‚úÖ Cat√©gorie ajout√©e avec succ√®s: ${record.id}');
        return record.id;
      }
    } catch (e) {
      print('‚ùå Erreur ajout/mise √† jour cat√©gorie: $e');
      throw Exception('Erreur lors de l\'ajout/mise √† jour de la cat√©gorie: $e');
    }
  }

  // M√©thode pour supprimer une cat√©gorie
  static Future<void> supprimerCategorie(String categorieId) async {
    try {
      final pb = await _getPocketBaseInstance();
      await pb.collection('categories').delete(categorieId);
      print('‚úÖ Cat√©gorie supprim√©e avec succ√®s: $categorieId');
    } catch (e) {
      print('‚ùå Erreur suppression cat√©gorie: $e');
      throw Exception('Erreur lors de la suppression de la cat√©gorie: $e');
    }
  }

  // Lire uniquement les comptes ch√®ques depuis PocketBase
  static Stream<List<Compte>> lireComptesChecques() async* {
    try {
      print('üîÑ PocketBaseService - Lecture comptes ch√®ques...');
      final pb = await _getPocketBaseInstance();
      
      // V√©rifier que l'utilisateur est connect√©
      final utilisateurId = pb.authStore.model?.id;
      final utilisateurNom = pb.authStore.model?.getStringValue('name') ?? pb.authStore.model?.getStringValue('username') ?? '';
      
      if (utilisateurId == null || utilisateurNom.isEmpty) {
        print('‚ùå Aucun utilisateur connect√© dans PocketBase');
        yield [];
        return;
      }
      
      final filtre = 'utilisateur_id = "$utilisateurId"';
      print('üîç Filtre utilis√©: $filtre');
      
      final records = await pb.collection('comptes_cheques').getFullList(
        filter: filtre,
      );
      
      print('üìä Nombre de records trouv√©s avec filtre: ${records.length}');
      
      final comptes = records
          .map((record) => Compte.fromPocketBase(record.data, record.id, 'Ch√®que'))
          .toList();

      print('‚úÖ ${comptes.length} compte(s) ch√®que(s) trouv√©(s)');
      yield comptes;
    } catch (e) {
      print('‚ùå Erreur lecture comptes ch√®ques: $e');
      yield [];
    }
  }

  // Lire uniquement les comptes de cr√©dit depuis PocketBase
  static Stream<List<Compte>> lireComptesCredits() async* {
    try {
      print('üîÑ PocketBaseService - Lecture comptes cr√©dits...');
      final pb = await _getPocketBaseInstance();
      
      // V√©rifier que l'utilisateur est connect√©
      final utilisateurId = pb.authStore.model?.id;
      final utilisateurNom = pb.authStore.model?.getStringValue('name') ?? pb.authStore.model?.getStringValue('username') ?? '';
      
      if (utilisateurId == null || utilisateurNom.isEmpty) {
        print('‚ùå Aucun utilisateur connect√© dans PocketBase');
        yield [];
        return;
      }

      final records = await pb.collection('comptes_credits').getFullList(
        filter: 'utilisateur_id = "$utilisateurId"',
      );

      final comptes = records
          .map((record) => Compte.fromPocketBase(record.data, record.id, 'Carte de cr√©dit'))
          .toList();

      print('‚úÖ ${comptes.length} compte(s) de cr√©dit trouv√©(s)');
      yield comptes;
    } catch (e) {
      print('‚ùå Erreur lecture comptes cr√©dits: $e');
      yield [];
    }
  }

  // Lire uniquement les comptes d'investissement depuis PocketBase
  static Stream<List<Compte>> lireComptesInvestissement() async* {
    try {
      print('üîÑ PocketBaseService - Lecture comptes investissement...');
      final pb = await _getPocketBaseInstance();
      
      // V√©rifier que l'utilisateur est connect√©
      final utilisateurId = pb.authStore.model?.id;
      final utilisateurNom = pb.authStore.model?.getStringValue('name') ?? pb.authStore.model?.getStringValue('username') ?? '';
      
      if (utilisateurId == null || utilisateurNom.isEmpty) {
        print('‚ùå Aucun utilisateur connect√© dans PocketBase');
        yield [];
        return;
      }

      final records = await pb.collection('comptes_investissement').getFullList(
        filter: 'utilisateur_id = "$utilisateurId"',
      );

      final comptes = records
          .map((record) => Compte.fromPocketBase(record.data, record.id, 'Investissement'))
          .toList();

      print('‚úÖ ${comptes.length} compte(s) d\'investissement trouv√©(s)');
      yield comptes;
    } catch (e) {
      print('‚ùå Erreur lecture comptes investissement: $e');
      yield [];
    }
  }

  // Lire les dettes (comptes_dettes + pr√™ts personnels) depuis PocketBase
  static Stream<List<Compte>> lireComptesDettes() async* {
    try {
      print('üîÑ PocketBaseService - Lecture comptes dettes + pr√™ts personnels...');
      final pb = await _getPocketBaseInstance();
      
      final utilisateurId = pb.authStore.model?.id;
      final utilisateurNom = pb.authStore.model?.getStringValue('name') ?? pb.authStore.model?.getStringValue('username') ?? '';
      
      if (utilisateurId == null || utilisateurNom.isEmpty) {
        print('‚ùå Aucun utilisateur connect√© dans PocketBase');
        yield [];
        return;
      }
      
      List<Compte> toutesLesDettes = [];

      // 1. R√©cup√©rer les dettes de la collection comptes_dettes
      try {
        final recordsDettes = await pb.collection('comptes_dettes').getFullList(
          filter: 'utilisateur_id = "$utilisateurId"',
        );

        final comptesDettes = recordsDettes
            .map((record) => Compte.fromPocketBase(record.data, record.id, 'Dette'))
            .toList();

        toutesLesDettes.addAll(comptesDettes);
        print('‚úÖ ${comptesDettes.length} dette(s) trouv√©e(s) dans comptes_dettes');
      } catch (e) {
        print('‚ö†Ô∏è Erreur lecture comptes_dettes: $e');
      }

      // 2. R√©cup√©rer les pr√™ts personnels de la collection pret_personnel
      try {
        final recordsPrets = await pb.collection('pret_personnel').getFullList(
          filter: 'utilisateur_id = "$utilisateurId"',
        );

        final comptesPrets = recordsPrets
            .map((record) => Compte.fromPocketBase(record.data, record.id, 'Dette'))
            .toList();

        toutesLesDettes.addAll(comptesPrets);
        print('‚úÖ ${comptesPrets.length} pr√™t(s) personnel(s) trouv√©(s)');
      } catch (e) {
        print('‚ö†Ô∏è Erreur lecture pret_personnel: $e');
      }

      print('‚úÖ Total: ${toutesLesDettes.length} dette(s) + pr√™t(s) trouv√©(s)');
      yield toutesLesDettes;
    } catch (e) {
      print('‚ùå Erreur lecture dettes: $e');
      yield [];
    }
  }

  // Combiner tous les types de comptes en un seul stream
  static Stream<List<Compte>> lireTousLesComptes() async* {
    print('üîÑ Appel de lireTousLesComptes');
    try {
      print('üîÑ PocketBaseService - Lecture de tous les comptes (4 collections)...');
      
      // R√©cup√©rer tous les comptes de chaque type
      final List<Compte> tousLesComptes = [];
      
      // Comptes ch√®ques
      await for (final comptesChecques in lireComptesChecques()) {
        tousLesComptes.addAll(comptesChecques);
        break; // Prendre seulement la premi√®re √©mission
      }
      
      // Comptes cr√©dits
      await for (final comptesCredits in lireComptesCredits()) {
        tousLesComptes.addAll(comptesCredits);
        break; // Prendre seulement la premi√®re √©mission
      }
      
      // Comptes investissement
      await for (final comptesInvestissement in lireComptesInvestissement()) {
        tousLesComptes.addAll(comptesInvestissement);
        break; // Prendre seulement la premi√®re √©mission
      }
      
      // Comptes dettes
      await for (final comptesDettes in lireComptesDettes()) {
        tousLesComptes.addAll(comptesDettes);
        break; // Prendre seulement la premi√®re √©mission
      }
      
      print('‚úÖ Total combin√©: ${tousLesComptes.length} compte(s)');
      yield tousLesComptes;
      
    } catch (e) {
      print('‚ùå Erreur lecture tous les comptes: $e');
      yield [];
    }
  }

  // M√©thode lireComptes pour compatibilit√© avec page_archivage
  static Stream<List<Compte>> lireComptes() async* {
    try {
      final pb = await _getPocketBaseInstance();
      final userId = pb.authStore.model?.id;
      
      if (userId == null) {
        print('‚ùå Utilisateur non connect√© pour lireComptes');
        yield [];
        return;
      }

      // R√©cup√©rer tous les comptes de l'utilisateur
      final records = await pb.collection('comptes').getFullList(
        filter: 'utilisateur_id = "$userId"',
        sort: 'ordre,nom',
      );

      final comptes = records.map((record) {
        return Compte(
          id: record.id,
          nom: record.data['nom'] ?? '',
          solde: (record.data['solde'] ?? 0.0).toDouble(),
          type: record.data['type'] ?? 'cheque',
          couleur: int.tryParse(record.data['couleur']?.toString() ?? '0') ?? 0x2196F3,
          pretAPlacer: (record.data['pret_a_placer'] ?? 0.0).toDouble(),
          dateCreation: DateTime.tryParse(record.data['created'] ?? '') ?? DateTime.now(),
          estArchive: record.data['archive'] ?? false,
          ordre: record.data['ordre'] ?? 0,
          userId: record.data['utilisateur_id'] ?? userId,
        );
      }).toList();

      yield comptes;
    } catch (e) {
      print('‚ùå Erreur lireComptes: $e');
      yield [];
    }
  }

  // M√©thode pour r√©cup√©rer les enveloppes d'une cat√©gorie sp√©cifique
  static Future<List<Map<String, dynamic>>> lireEnveloppesParCategorie(String categorieId) async {
    try {
      final pb = await _getPocketBaseInstance();
      final records = await pb.collection('enveloppes').getFullList(
        filter: 'categorie_id = "$categorieId"',
        sort: 'nom',
      );
      
      return records.map((record) => record.toJson()).toList();
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration enveloppes par cat√©gorie: $e');
      return [];
    }
  }

  // M√©thode pour r√©cup√©rer toutes les enveloppes avec leur cat√©gorie
  static Future<Map<String, List<Map<String, dynamic>>>> lireEnveloppesGroupeesParCategorie() async {
    try {
      final pb = await _getPocketBaseInstance();
      
      // V√©rifier que l'utilisateur est connect√©
      final utilisateurId = pb.authStore.model?.id;
      if (utilisateurId == null) {
        print('‚ùå Aucun utilisateur connect√© dans PocketBase');
        return {};
      }
      
      // Filtrer par utilisateur connect√©
      final filtre = 'utilisateur_id = "$utilisateurId"';
      print('üîç Filtre utilis√© pour enveloppes: $filtre');
      
      final records = await pb.collection('enveloppes').getFullList(
        filter: filtre,
        expand: 'categorie_id',
        sort: 'categorie_id.nom,nom',
      );
      
      print('üîç DEBUG lireEnveloppesGroupeesParCategorie - ${records.length} enveloppes r√©cup√©r√©es');
      
      final Map<String, List<Map<String, dynamic>>> enveloppesParCategorie = {};
      
      for (final record in records) {
        final categorieId = record.data['categorie_id'] as String;
        final enveloppeData = record.toJson();
        final nomEnveloppe = record.data['nom'] ?? 'Sans nom';
        
        print('üîç Enveloppe "$nomEnveloppe" -> cat√©gorie ID: "$categorieId"');
        
        if (!enveloppesParCategorie.containsKey(categorieId)) {
          enveloppesParCategorie[categorieId] = [];
        }
        enveloppesParCategorie[categorieId]!.add(enveloppeData);
      }
      
      print('üîç DEBUG R√©sultat groupement:');
      enveloppesParCategorie.forEach((catId, enveloppes) {
        print('üîç Cat√©gorie ID "$catId" -> ${enveloppes.length} enveloppes');
      });
      
      return enveloppesParCategorie;
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration enveloppes group√©es: $e');
      return {};
    }
  }

  // M√©thode pour r√©cup√©rer toutes les enveloppes d'un utilisateur
  static Future<List<Map<String, dynamic>>> lireToutesEnveloppes() async {
    try {
      final pb = await _getPocketBaseInstance();
      final userId = pb.authStore.model?.id;
      if (userId == null) throw Exception('Utilisateur non connect√©');
      
      final records = await pb.collection('enveloppes').getFullList(
        filter: 'utilisateur_id = "$userId"',
        expand: 'categorie_id',
        sort: 'categorie_id.nom,nom',
      );
      
      return records.map((record) => record.toJson()).toList();
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration toutes enveloppes: $e');
      return [];
    }
  }

  // ============================================================================
  // M√âTHODES POUR G√âRER LES ENVELOPPES
  // ============================================================================

  // M√©thode pour ajouter une nouvelle enveloppe
  static Future<String> ajouterEnveloppe(Map<String, dynamic> enveloppeData) async {
    try {
      final pb = await _getPocketBaseInstance();
      final userId = pb.authStore.model?.id;
      if (userId == null) throw Exception('Utilisateur non connect√©');
      
      // Ajouter l'ID utilisateur si pas d√©j√† pr√©sent
      enveloppeData['utilisateur_id'] = userId;
      
      final record = await pb.collection('enveloppes').create(body: enveloppeData);
      print('‚úÖ Enveloppe ajout√©e avec succ√®s: ${record.id}');
      return record.id;
    } catch (e) {
      print('‚ùå Erreur ajout enveloppe: $e');
      throw Exception('Erreur lors de l\'ajout de l\'enveloppe: $e');
    }
  }

  // M√©thode pour mettre √† jour une enveloppe
  static Future<void> mettreAJourEnveloppe(String enveloppeId, Map<String, dynamic> donnees) async {
    try {
      final pb = await _getPocketBaseInstance();
      await pb.collection('enveloppes').update(enveloppeId, body: donnees);
      print('‚úÖ Enveloppe mise √† jour avec succ√®s: $enveloppeId');
    } catch (e) {
      print('‚ùå Erreur mise √† jour enveloppe: $e');
      throw Exception('Erreur lors de la mise √† jour de l\'enveloppe: $e');
    }
  }

  // M√©thode pour supprimer une enveloppe
  static Future<void> supprimerEnveloppe(String enveloppeId) async {
    try {
      final pb = await _getPocketBaseInstance();
      await pb.collection('enveloppes').delete(enveloppeId);
      print('‚úÖ Enveloppe supprim√©e avec succ√®s: $enveloppeId');
    } catch (e) {
      print('‚ùå Erreur suppression enveloppe: $e');
      throw Exception('Erreur lors de la suppression de l\'enveloppe: $e');
    }
  }

  // M√©thode pour archiver une enveloppe
  static Future<void> archiverEnveloppe(String enveloppeId) async {
    try {
      final pb = await _getPocketBaseInstance();
      await pb.collection('enveloppes').update(enveloppeId, body: {
        'est_archive': true,
      });
      print('‚úÖ Enveloppe archiv√©e avec succ√®s: $enveloppeId');
    } catch (e) {
      print('‚ùå Erreur archivage enveloppe: $e');
      throw Exception('Erreur lors de l\'archivage de l\'enveloppe: $e');
    }
  }

  // M√©thode pour restaurer une enveloppe archiv√©e
  static Future<void> restaurerEnveloppe(String enveloppeId) async {
    try {
      final pb = await _getPocketBaseInstance();
      await pb.collection('enveloppes').update(enveloppeId, body: {
        'est_archive': false,
      });
      print('‚úÖ Enveloppe restaur√©e avec succ√®s: $enveloppeId');
    } catch (e) {
      print('‚ùå Erreur restauration enveloppe: $e');
      throw Exception('Erreur lors de la restauration de l\'enveloppe: $e');
    }
  }

  // M√©thode pour modifier une enveloppe (alias pour mettreAJourEnveloppe)
  static Future<void> modifierEnveloppe(Map<String, dynamic> donnees) async {
    final enveloppeId = donnees['id'];
    if (enveloppeId == null) {
      throw Exception('ID de l\'enveloppe manquant pour la modification');
    }
    
    // Retirer l'ID des donn√©es √† envoyer
    final donneesModification = Map<String, dynamic>.from(donnees);
    donneesModification.remove('id');
    
    await mettreAJourEnveloppe(enveloppeId, donneesModification);
  }

  // M√©thode pour ajouter un compte dans PocketBase
  static Future<void> ajouterCompte(Compte compte) async {
    try {
      print('üîÑ PocketBaseService - Ajout compte: ${compte.nom}');
      final pb = await _getPocketBaseInstance();

      // V√©rifier que l'utilisateur est connect√©
      final utilisateurId = pb.authStore.model?.id;
      final utilisateurNom = pb.authStore.model?.getStringValue('name') ?? '';
      if (utilisateurId == null) {
        throw Exception('‚ùå Aucun utilisateur connect√© dans PocketBase');
      }

      print('üîê Utilisateur connect√© pour ajout: $utilisateurId');
      print('üîê Nom utilisateur pour ajout: $utilisateurNom');
      
      // D√©terminer la collection selon le type de compte
      String nomCollection;
      Map<String, dynamic> donneesCompte;

      switch (compte.type) {
        case 'Ch√®que':
          nomCollection = 'comptes_cheques';
          donneesCompte = {
            'utilisateur_id': utilisateurId, // Utiliser l'ID au lieu du nom
            'nom': compte.nom,
            'solde': compte.solde,
            'pret_a_placer': compte.pretAPlacer,
            'couleur': '#${compte.couleur.toRadixString(16).padLeft(8, '0')}',
            'ordre': compte.ordre ?? 0,
            'archive': compte.estArchive,
          };
          break;

        case 'Carte de cr√©dit':
          nomCollection = 'comptes_credits';
          donneesCompte = {
            'utilisateur_id': utilisateurId, // Utiliser l'ID au lieu du nom
            'nom': compte.nom,
            'solde_utilise': compte.solde.abs(), // Montant utilis√© (positif)
            'limite_credit': compte.solde.abs() + 1000, // Limite par d√©faut
            'taux_interet': 19.99, // Taux par d√©faut
            'couleur': '#${compte.couleur.toRadixString(16).padLeft(8, '0')}',
            'ordre': compte.ordre ?? 0,
            'archive': compte.estArchive,
          };
          break;

        case 'Dette':
          nomCollection = 'comptes_dettes';
          donneesCompte = {
            'utilisateur_id': utilisateurId, // Utiliser le bon champ selon le guide
            'nom': compte.nom,
            'nom_tiers': compte.nom, // Nom du tiers
            'solde_dette': compte.solde.abs(), // Montant de la dette (positif)
            'montant_initial': compte.solde.abs(),
            'taux_interet': 0.0,
            'paiement_minimum': 0.0,
            'ordre': compte.ordre ?? 0,
            'archive': compte.estArchive,
          };
          break;

        case 'Investissement':
          nomCollection = 'comptes_investissement';
          donneesCompte = {
            'utilisateur_id': utilisateurId, // Utiliser le bon champ selon le guide
            'nom': compte.nom,
            'valeur_marche': compte.solde,
            'cout_base': compte.pretAPlacer,
            'couleur': '#${compte.couleur.toRadixString(16).padLeft(8, '0')}',
            'ordre': compte.ordre ?? 0,
            'archive': compte.estArchive,
          };
          break;

        default:
          throw Exception('Type de compte non support√©: ${compte.type}');
      }

      print('üîÑ Cr√©ation dans collection: $nomCollection');
      
      final result = await pb.collection(nomCollection).create(body: donneesCompte);
      
      print('‚úÖ Compte cr√©√© avec ID: ${result.id}');
      print('‚úÖ Ajout compte termin√©: ${compte.nom}');

    } catch (e) {
      print('‚ùå Erreur ajout compte PocketBase: $e');
      rethrow;
    }
  }

  // M√©thode pour mettre √† jour un compte
  static Future<void> updateCompte(String compteId, Map<String, dynamic> donnees) async {
    try {
      print('üîÑ PocketBaseService - Mise √† jour compte: $compteId');
      final pb = await _getPocketBaseInstance();

      // D√©terminer la collection en cherchant dans toutes les collections
      final collections = ['comptes_cheques', 'comptes_credits', 'comptes_investissement', 'comptes_dettes', 'pret_personnel'];
      
      for (final nomCollection in collections) {
        try {
          await pb.collection(nomCollection).update(compteId, body: donnees);
          print('‚úÖ Compte mis √† jour dans $nomCollection');
          return;
        } catch (e) {
          // Continuer vers la collection suivante si le compte n'est pas trouv√©
          continue;
        }
      }
      
      throw Exception('Compte non trouv√© dans aucune collection');
    } catch (e) {
      print('‚ùå Erreur mise √† jour compte PocketBase: $e');
      rethrow;
    }
  }

  // Cr√©er des cat√©gories de test dans PocketBase
  static Future<void> creerCategoriesTest() async {
    try {
      print('üîÑ PocketBaseService - Cr√©ation cat√©gories de test...');
      final pb = await _getPocketBaseInstance();

      // V√©rifier que l'utilisateur est connect√©
      final utilisateurId = pb.authStore.model?.id;
      if (utilisateurId == null) {
        print('‚ùå Aucun utilisateur connect√© - impossible de cr√©er des cat√©gories');
        return;
      }

      final categoriesTest = [
        {
          'nom': 'Alimentation',
          'utilisateur_id': utilisateurId, // Utiliser le bon champ selon le guide
          'ordre': 1,
        },
        {
          'nom': 'Transport',
          'utilisateur_id': utilisateurId,
          'ordre': 2,
        },
        {
          'nom': 'Logement',
          'utilisateur_id': utilisateurId,
          'ordre': 3,
        },
        {
          'nom': 'Loisirs',
          'utilisateur_id': utilisateurId,
          'ordre': 4,
        },
      ];

      for (final categorie in categoriesTest) {
        try {
          await pb.collection('categories').create(body: categorie);
          print('‚úÖ Cat√©gorie cr√©√©e: ${categorie['nom']}');
        } catch (e) {
          print('! Cat√©gorie d√©j√† existante: ${categorie['nom']}');
        }
      }

      print('‚úÖ Cr√©ation cat√©gories de test termin√©e');
    } catch (e) {
      print('‚ùå Erreur cr√©ation cat√©gories de test: $e');
    }
  }

  // Instance singleton pour compatibilit√©
  static PocketBase? _pbInstance;

  // Getter pour l'instance (compatibilit√© migration_service)
  static Future<PocketBase> get instance async {
    if (_pbInstance == null) {
      _pbInstance = await _getPocketBaseInstance();
    }
    return _pbInstance!;
  }

  // M√©thode signUp pour compatibilit√©
  static Future<RecordModel> signUp(
      String email, String password, String name) async {
    final pb = await _getPocketBaseInstance();
    return await pb.collection('users').create(body: {
      'email': email,
      'password': password,
      'passwordConfirm': password,
      'name': name,
    });
  }
}