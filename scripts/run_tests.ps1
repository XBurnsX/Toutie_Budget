# Script PowerShell pour ex√©cuter tous les tests de Toutie_Budget
# Usage: .\scripts\run_tests.ps1 [options]

param(
    [switch]$Help,
    [switch]$Coverage,
    [switch]$Verbose,
    [switch]$UnitOnly,
    [switch]$WidgetOnly,
    [switch]$IntegrationOnly
)

# Fonction d'aide
function Show-Help {
    Write-Host "Script de test pour Toutie_Budget" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "Usage: .\scripts\run_tests.ps1 [options]" -ForegroundColor White
    Write-Host ""
    Write-Host "Options:" -ForegroundColor Yellow
    Write-Host "  -Help              Afficher cette aide"
    Write-Host "  -Coverage          G√©n√©rer un rapport de couverture"
    Write-Host "  -Verbose           Mode verbeux"
    Write-Host "  -UnitOnly          Ex√©cuter seulement les tests unitaires"
    Write-Host "  -WidgetOnly        Ex√©cuter seulement les tests de widgets"
    Write-Host "  -IntegrationOnly   Ex√©cuter seulement les tests d'int√©gration"
    Write-Host ""
    Write-Host "Exemples:" -ForegroundColor Yellow
    Write-Host "  .\scripts\run_tests.ps1                      Ex√©cuter tous les tests"
    Write-Host "  .\scripts\run_tests.ps1 -Coverage           Ex√©cuter tous les tests avec couverture"
    Write-Host "  .\scripts\run_tests.ps1 -UnitOnly -Verbose  Ex√©cuter les tests unitaires en mode verbeux"
    Write-Host "  .\scripts\run_tests.ps1 -WidgetOnly -Coverage Ex√©cuter les tests de widgets avec couverture"
}

# Fonction pour afficher les messages
function Write-Log {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Afficher l'aide si demand√©
if ($Help) {
    Show-Help
    exit 0
}

# V√©rifier que Flutter est install√©
try {
    $flutterVersion = flutter --version
    if ($LASTEXITCODE -ne 0) {
        throw "Flutter non trouv√©"
    }
} catch {
    Write-Error "Flutter n'est pas install√© ou n'est pas dans le PATH"
    exit 1
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "pubspec.yaml")) {
    Write-Error "Ce script doit √™tre ex√©cut√© depuis la racine du projet Flutter"
    exit 1
}

Write-Log "D√©marrage des tests pour Toutie_Budget..."

# Nettoyer les anciens tests
Write-Log "Nettoyage des anciens tests..."
flutter clean
flutter pub get

# Pr√©parer les options de test
$testOptions = @()
if ($Verbose) {
    $testOptions += "--verbose"
}

if ($Coverage) {
    $testOptions += "--coverage"
    # Cr√©er le dossier de couverture s'il n'existe pas
    if (-not (Test-Path "coverage")) {
        New-Item -ItemType Directory -Path "coverage" | Out-Null
    }
}

# Fonction pour ex√©cuter les tests
function Run-Tests {
    param(
        [string]$TestPattern,
        [string]$TestName
    )
    
    Write-Log "Ex√©cution des $TestName..."
    
    $command = "flutter test $TestPattern"
    if ($testOptions.Count -gt 0) {
        $command += " " + ($testOptions -join " ")
    }
    
    if ($Coverage) {
        $coveragePath = "coverage/$($TestName.Replace(' ', '_').ToLower())"
        $command += " --coverage-path=$coveragePath"
    }
    
    Write-Host "Ex√©cution: $command" -ForegroundColor Gray
    
    Invoke-Expression $command
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "$TestName termin√©s avec succ√®s"
        return $true
    } else {
        Write-Error "$TestName ont √©chou√©"
        return $false
    }
}

# Ex√©cuter les tests selon les options
$failedTests = 0

if ($UnitOnly) {
    # Tests unitaires seulement
    if (-not (Run-Tests "test/models/" "tests unitaires des mod√®les")) { $failedTests++ }
    if (-not (Run-Tests "test/services/" "tests unitaires des services")) { $failedTests++ }
} elseif ($WidgetOnly) {
    # Tests de widgets seulement
    if (-not (Run-Tests "test/widgets/" "tests de widgets")) { $failedTests++ }
} elseif ($IntegrationOnly) {
    # Tests d'int√©gration seulement
    if (-not (Run-Tests "test/integration/" "tests d'int√©gration")) { $failedTests++ }
} else {
    # Tous les tests
    Write-Log "Ex√©cution de tous les tests..."
    
    # Tests unitaires
    if (-not (Run-Tests "test/models/" "tests unitaires des mod√®les")) { $failedTests++ }
    if (-not (Run-Tests "test/services/" "tests unitaires des services")) { $failedTests++ }
    
    # Tests de widgets
    if (-not (Run-Tests "test/widgets/" "tests de widgets")) { $failedTests++ }
    
    # Tests d'int√©gration
    if (-not (Run-Tests "test/integration/" "tests d'int√©gration")) { $failedTests++ }
    
    # Tests existants
    if (-not (Run-Tests "test/finances_calculs_test.dart" "tests de calculs financiers")) { $failedTests++ }
    if (-not (Run-Tests "test/widget_test.dart" "tests de widgets par d√©faut")) { $failedTests++ }
}

# G√©n√©rer le rapport de couverture si demand√©
if ($Coverage) {
    Write-Log "G√©n√©ration du rapport de couverture..."
    
    # V√©rifier si genhtml est disponible (n√©cessite lcov sur Windows)
    try {
        $genhtmlVersion = genhtml --version
        if ($LASTEXITCODE -eq 0) {
            genhtml coverage/lcov.info -o coverage/html
            Write-Success "Rapport de couverture g√©n√©r√© dans coverage/html/"
            Write-Log "Ouvrez coverage/html/index.html dans votre navigateur pour voir le rapport"
        }
    } catch {
        Write-Warning "genhtml n'est pas install√©. Installez lcov pour g√©n√©rer le rapport HTML"
        Write-Log "Rapport de couverture brut disponible dans coverage/lcov.info"
    }
}

# R√©sum√© final
Write-Host ""
if ($failedTests -eq 0) {
    Write-Success "Tous les tests sont pass√©s avec succ√®s ! üéâ"
    exit 0
} else {
    Write-Error "$failedTests suite(s) de tests ont √©chou√©"
    exit 1
} 