ÔøΩÔøΩ STRAT√âGIE DE MIGRATION IT√âRATIVE
PHASE 1 : PR√âPARATION ET INFRASTRUCTURE
√âtape 1.1 : Cr√©er les interfaces communes
Apply to liste_catego...
Test : V√©rifier que l'interface compile sans erreurs
√âtape 1.2 : Cr√©er l'adaptateur PocketBase
Apply to liste_catego...
Test : V√©rifier que l'adaptateur impl√©mente correctement l'interface
PHASE 2 : MIGRATION DES LECTURES SIMPLES
√âtape 2.1 : Migration des comptes (lecture seule)
Modifier AjoutTransactionController._chargerComptesFirebase()
Utiliser PocketBaseService.lireComptes() au lieu de FirebaseService
Test : Ouvrir la page d'ajout transaction et v√©rifier que les comptes s'affichent
√âtape 2.2 : Migration des cat√©gories (lecture seule)
Modifier AjoutTransactionController._chargerCategoriesFirebase()
Utiliser PocketBaseService.lireCategories()
Test : V√©rifier que les enveloppes s'affichent dans le s√©lecteur
√âtape 2.3 : Migration des tiers (lecture seule)
Modifier AjoutTransactionController._chargerTiersConnus()
Utiliser PocketBaseService.lireTiers()
Test : V√©rifier que l'autocompl√©tion des tiers fonctionne
PHASE 3 : MIGRATION DES √âCRITURES SIMPLES
√âtape 3.1 : Ajout de nouveaux tiers
Modifier AjoutTransactionController.ajouterNouveauTiers()
Utiliser PocketBaseService.ajouterTiers()
Test : Ajouter un nouveau tiers et v√©rifier qu'il appara√Æt dans la liste
√âtape 3.2 : Sauvegarde de transactions simples
Modifier AjoutTransactionController.sauvegarderTransaction() pour les transactions basiques
Exclure temporairement les transactions fractionn√©es et les dettes
Test : Cr√©er une transaction simple et v√©rifier qu'elle s'enregistre
PHASE 4 : MIGRATION DES FONCTIONNALIT√âS COMPLEXES
√âtape 4.1 : Transactions fractionn√©es
Adapter _ouvrirModaleFractionnement() pour PocketBase
Modifier la sauvegarde des transactions fractionn√©es
Test : Cr√©er une transaction fractionn√©e et v√©rifier la r√©partition
√âtape 4.2 : Gestion des dettes
Migrer DetteService vers PocketBase
Adapter les m√©thodes de cr√©ation et remboursement de dettes
Test : Cr√©er une dette et effectuer un remboursement
√âtape 4.3 : Mise √† jour des soldes
Adapter la logique de mise √† jour des soldes de comptes
Adapter la logique de mise √† jour des soldes d'enveloppes
Test : V√©rifier que les soldes se mettent √† jour correctement
PHASE 5 : OPTIMISATION ET FINALISATION
√âtape 5.1 : Gestion des erreurs
Adapter les messages d'erreur pour PocketBase
Impl√©menter la gestion des timeouts
Test : Tester les cas d'erreur (connexion perdue, donn√©es invalides)
√âtape 5.2 : Performance et cache
Optimiser les requ√™tes PocketBase
Impl√©menter le cache local si n√©cessaire
Test : V√©rifier les performances avec beaucoup de donn√©es
üõ†Ô∏è OUTILS DE TEST √Ä UTILISER
1. Tests manuels apr√®s chaque √©tape :
Apply to liste_catego...
2. Tests de r√©gression :
V√©rifier que les anciennes fonctionnalit√©s marchent toujours
Tester les cas limites (donn√©es vides, erreurs r√©seau)
3. Tests de coh√©rence :
V√©rifier que les donn√©es sont coh√©rentes entre Firebase et PocketBase
Tester la synchronisation des donn√©es
ÔøΩÔøΩ CHECKLIST DE VALIDATION PAR √âTAPE
Apr√®s chaque √©tape, v√©rifier :
[ ] L'application se lance sans erreur
[ ] La page d'ajout transaction s'ouvre
[ ] Les donn√©es se chargent correctement
[ ] Les fonctionnalit√©s de base marchent
[ ] Pas de r√©gression sur les autres pages
üö® POINTS D'ATTENTION
1. Gestion des erreurs :
Apply to liste_catego...
2. Rollback en cas de probl√®me :
Garder l'ancien code comment√©
Avoir un flag pour basculer entre Firebase et PocketBase
Tester sur un environnement de d√©veloppement d'abord
3. Migration des donn√©es existantes :
Cr√©er un script de migration des donn√©es Firebase vers PocketBase
Tester la migration sur un sous-ensemble de donn√©es